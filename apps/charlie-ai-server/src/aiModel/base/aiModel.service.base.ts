/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AiModel as PrismaAiModel } from "@prisma/client";

export class AiModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AiModelCountArgs, "select">): Promise<number> {
    return this.prisma.aiModel.count(args);
  }

  async aiModels<T extends Prisma.AiModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiModelFindManyArgs>
  ): Promise<PrismaAiModel[]> {
    return this.prisma.aiModel.findMany<Prisma.AiModelFindManyArgs>(args);
  }
  async aiModel<T extends Prisma.AiModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiModelFindUniqueArgs>
  ): Promise<PrismaAiModel | null> {
    return this.prisma.aiModel.findUnique(args);
  }
  async createAiModel<T extends Prisma.AiModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiModelCreateArgs>
  ): Promise<PrismaAiModel> {
    return this.prisma.aiModel.create<T>(args);
  }
  async updateAiModel<T extends Prisma.AiModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiModelUpdateArgs>
  ): Promise<PrismaAiModel> {
    return this.prisma.aiModel.update<T>(args);
  }
  async deleteAiModel<T extends Prisma.AiModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AiModelDeleteArgs>
  ): Promise<PrismaAiModel> {
    return this.prisma.aiModel.delete(args);
  }
}

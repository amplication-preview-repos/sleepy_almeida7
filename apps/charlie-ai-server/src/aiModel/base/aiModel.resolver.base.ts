/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AiModel } from "./AiModel";
import { AiModelCountArgs } from "./AiModelCountArgs";
import { AiModelFindManyArgs } from "./AiModelFindManyArgs";
import { AiModelFindUniqueArgs } from "./AiModelFindUniqueArgs";
import { CreateAiModelArgs } from "./CreateAiModelArgs";
import { UpdateAiModelArgs } from "./UpdateAiModelArgs";
import { DeleteAiModelArgs } from "./DeleteAiModelArgs";
import { AiModelService } from "../aiModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiModel)
export class AiModelResolverBase {
  constructor(
    protected readonly service: AiModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiModel",
    action: "read",
    possession: "any",
  })
  async _aiModelsMeta(
    @graphql.Args() args: AiModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiModel])
  @nestAccessControl.UseRoles({
    resource: "AiModel",
    action: "read",
    possession: "any",
  })
  async aiModels(
    @graphql.Args() args: AiModelFindManyArgs
  ): Promise<AiModel[]> {
    return this.service.aiModels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiModel",
    action: "read",
    possession: "own",
  })
  async aiModel(
    @graphql.Args() args: AiModelFindUniqueArgs
  ): Promise<AiModel | null> {
    const result = await this.service.aiModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiModel)
  @nestAccessControl.UseRoles({
    resource: "AiModel",
    action: "create",
    possession: "any",
  })
  async createAiModel(
    @graphql.Args() args: CreateAiModelArgs
  ): Promise<AiModel> {
    return await this.service.createAiModel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiModel)
  @nestAccessControl.UseRoles({
    resource: "AiModel",
    action: "update",
    possession: "any",
  })
  async updateAiModel(
    @graphql.Args() args: UpdateAiModelArgs
  ): Promise<AiModel | null> {
    try {
      return await this.service.updateAiModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiModel)
  @nestAccessControl.UseRoles({
    resource: "AiModel",
    action: "delete",
    possession: "any",
  })
  async deleteAiModel(
    @graphql.Args() args: DeleteAiModelArgs
  ): Promise<AiModel | null> {
    try {
      return await this.service.deleteAiModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
